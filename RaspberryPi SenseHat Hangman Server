import socket, sense_hat, random, time
sense = sense_hat.SenseHat()

sense = sense_hat.SenseHat()
state = {
            "user_pick" : None,
            "picks" : ("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"),
            "choice_index" : 0
            }
words = ("duck", "cat", "dog", "horse", "goat", "cow", "pig")
word_to_guess = random.choice(words)

X = [0, 0, 255]
O = [0, 0, 0]
W = [0, 255, 0]
E = [255, 0, 0]
A = [123, 255, 90]
B = [255, 100, 50]
C = [0, 255, 120]
D = [0, 90, 255]

def generate_word_string(word_to_guess, letters_guessed):
    output = []
    for letter in word_to_guess:
        if letter in letters_guessed:
            output.append(letter.upper())
        else:
            output.append("_")
    return " ".join(output)

hangman1 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, O, O, O,
O, X, O, O, O, O, O, O,
O, X, O, O, O, O, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]


hangman2 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
O, X, O, O, O, O, O, O,
X, X, X, O, O, O, O, O,import socket, sense_hat, random, time
sense = sense_hat.SenseHat()

sense = sense_hat.SenseHat()
state = {
            "user_pick" : None,
            "picks" : ("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"),
            "choice_index" : 0
            }
words = ("duck", "cat", "dog", "horse", "goat", "cow", "pig")
word_to_guess = random.choice(words)

X = [0, 0, 255]
O = [0, 0, 0]
W = [0, 255, 0]
E = [255, 0, 0]
A = [123, 255, 90]
B = [255, 100, 50]
C = [0, 255, 120]
D = [0, 90, 255]

def generate_word_string(word_to_guess, letters_guessed):
    output = []
    for letter in word_to_guess:
        if letter in letters_guessed:
            output.append(letter.upper())
        else:
            output.append("_")
    return " ".join(output)

hangman1 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, O, O, O,
O, X, O, O, O, O, O, O,
O, X, O, O, O, O, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]


hangman2 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
O, X, O, O, O, O, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

hangman3 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
O, X, O, O, O, E, O, O,
X, X, X, O, E, O, E, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

art1 = [
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A,
B, C, D, E, A, B, C, D,
E, A, B, C, D, E, A, B,
C, D, E, A, B, C, D, E,
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A,
B, C, D, E, A, B, C, D
]

art2 = [
C, D, E, A, B, C, D, E,
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A,
B, C, D, E, A, B, C, D,
E, A, B, C, D, E, A, B,
C, D, E, A, B, C, D, E,
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A
]

green = [
O, O, O, O, O, O, O, O,
O, O, O, O, O, O, O, W,
O, O, O, O, O, O, W, O,
O, O, O, O, O, W, O, O,
W, O, O, O, W, O, O, O,
O, W, O, W, O, O, O, O,
O, O, W, O, O, O, O, O,
O, O, O, O, O, O, O, O
]
    
red = [
E, O, O, O, O, O, O, E,
O, E, O, O, O, O, E, O,
O, O, E, O, O, E, O, O,
O, O, O, E, E, O, O, O,
O, O, O, E, E, O, O, O,
O, O, E, O, O, E, O, O,
O, E, O, O, O, O, E, O,
E, O, O, O, O, O, O, E
]


man2 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, O, O, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man3 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, O, E, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man4 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, O, O,
X, X, X, O, O, E, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man5 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
X, X, X, O, O, E, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man6 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
X, X, X, O, O, E, O, O,
X, O, X, O, E, O, O, O,
X, O, X, O, O, O, O, O,
]


man7 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
X, X, X, O, O, E, O, O,
X, O, X, O, E, O, E, O,
X, O, X, O, O, O, O, O,
]

host = ''        
port = 8014
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(1)
conn, addr = s.accept()
print('Connected by', addr)
conn.send(word_to_guess.encode())
sense.clear()
for image in [hangman1, hangman2, hangman3]:
    sense.set_pixels(image)
    time.sleep(1)
sense.set_pixels(art1)
time.sleep(1)
sense.set_rotation(180)
sense.set_pixels(art2)
time.sleep(1)
sense.set_rotation(0)
sense.show_message("Welcome to Hangman! Pick a letter")
sense.set_pixels(hangman1)



letters_to_guess = set(word_to_guess)
correct_letters_guessed = set()
incorrect_letters_guessed = set()
num_guessed = 0
while (len(letters_to_guess) > 0) and num_guessed < 6:
    s.listen(1)
    user_pick = (conn.recv(1024).decode())

    if user_pick in letters_to_guess:
        letters_to_guess.remove(user_pick)
        correct_letters_guessed.add(user_pick)
        conn.send("yes".encode())
        sense.set_pixels(green)
        time.sleep(1)
        if num_guessed == 1:
            sense.set_pixels(man2)
        elif num_guessed == 2:
            sense.set_pixels(man3)
        elif num_guessed == 3:
            sense.set_pixels(man4)
        elif num_guessed == 4:
            sense.set_pixels(man5)
        elif num_guessed == 5:
            sense.set_pixels(man6)
        elif num_guessed == 6:
            sense.set_pixels(man7)
        
    else:
        incorrect_letters_guessed.add(user_pick)
        num_guessed += 1
        sense.set_pixels(red)
        time.sleep(1)
        if num_guessed == 1:
            sense.set_pixels(man2)
        elif num_guessed == 2:
            sense.set_pixels(man3)
        elif num_guessed == 3:
            sense.set_pixels(man4)
        elif num_guessed == 4:
            sense.set_pixels(man5)
        elif num_guessed == 5:
            sense.set_pixels(man6)
        elif num_guessed == 6:
            sense.set_pixels(man7)
            
            
    word_string = generate_word_string(word_to_guess, correct_letters_guessed)
    print(incorrect_letters_guessed)
    print(word_string)
    print("You have {} guesses left.".format(6 - num_guessed))
    print("You have guessed {} so far".format(list(incorrect_letters_guessed)))
        
if num_guessed < 6:
    print("You win!")
    sense.show_message("You win!")
else:
    print("You lose")
    sense.show_message("You lose!")
   

X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

hangman3 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
O, X, O, O, O, E, O, O,
X, X, X, O, E, O, E, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

art1 = [
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A,
B, C, D, E, A, B, C, D,
E, A, B, C, D, E, A, B,
C, D, E, A, B, C, D, E,
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A,
B, C, D, E, A, B, C, D
]

art2 = [
C, D, E, A, B, C, D, E,
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A,
B, C, D, E, A, B, C, D,
E, A, B, C, D, E, A, B,
C, D, E, A, B, C, D, E,
A, B, C, D, E, A, B, C,
D, E, A, B, C, D, E, A
]

green = [
O, O, O, O, O, O, O, O,
O, O, O, O, O, O, O, W,
O, O, O, O, O, O, W, O,
O, O, O, O, O, W, O, O,
W, O, O, O, W, O, O, O,
O, W, O, W, O, O, O, O,
O, O, W, O, O, O, O, O,
O, O, O, O, O, O, O, O
]
    
red = [
E, O, O, O, O, O, O, E,
O, E, O, O, O, O, E, O,
O, O, E, O, O, E, O, O,
O, O, O, E, E, O, O, O,
O, O, O, E, E, O, O, O,
O, O, E, O, O, E, O, O,
O, E, O, O, O, O, E, O,
E, O, O, O, O, O, O, E
]


man2 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, O, O, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man3 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, O, E, O, O,
X, X, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man4 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, O, O,
X, X, X, O, O, E, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man5 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
X, X, X, O, O, E, O, O,
X, O, X, O, O, O, O, O,
X, O, X, O, O, O, O, O,
]

man6 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
X, X, X, O, O, E, O, O,
X, O, X, O, E, O, O, O,
X, O, X, O, O, O, O, O,
]


man7 = [
O, O, X, X, X, O, O, O,
O, X, O, O, O, X, O, O,
O, X, O, O, O, W, O, O,
O, X, O, O, O, E, O, O,
O, X, O, O, E, E, E, O,
X, X, X, O, O, E, O, O,
X, O, X, O, E, O, E, O,
X, O, X, O, O, O, O, O,
]

host = ''        
port = 8014
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(1)
conn, addr = s.accept()
print('Connected by', addr)
conn.send(word_to_guess.encode())
sense.clear()
for image in [hangman1, hangman2, hangman3]:
    sense.set_pixels(image)
    time.sleep(1)
sense.set_pixels(art1)
time.sleep(1)
sense.set_rotation(180)
sense.set_pixels(art2)
time.sleep(1)
sense.set_rotation(0)
sense.show_message("Welcome to Hangman! Pick a letter")
sense.set_pixels(hangman1)



letters_to_guess = set(word_to_guess)
correct_letters_guessed = set()
incorrect_letters_guessed = set()
num_guessed = 0
while (len(letters_to_guess) > 0) and num_guessed < 6:
    s.listen(1)
    user_pick = (conn.recv(1024).decode())

    if user_pick in letters_to_guess:
        letters_to_guess.remove(user_pick)
        correct_letters_guessed.add(user_pick)
        conn.send("Yes, there's one of those".encode())
        sense.set_pixels(green)
        time.sleep(1)
        if num_guessed == 1:
            sense.set_pixels(man2)
        elif num_guessed == 2:
            sense.set_pixels(man3)
        elif num_guessed == 3:
            sense.set_pixels(man4)
        elif num_guessed == 4:
            sense.set_pixels(man5)
        elif num_guessed == 5:
            sense.set_pixels(man6)
        elif num_guessed == 6:
            sense.set_pixels(man7)
        
    else:
        incorrect_letters_guessed.add(user_pick)
        num_guessed += 1
        conn.send("No, none of those".encode())
        sense.set_pixels(red)
        time.sleep(1)
        if num_guessed == 1:
            sense.set_pixels(man2)
        elif num_guessed == 2:
            sense.set_pixels(man3)
        elif num_guessed == 3:
            sense.set_pixels(man4)
        elif num_guessed == 4:
            sense.set_pixels(man5)
        elif num_guessed == 5:
            sense.set_pixels(man6)
        elif num_guessed == 6:
            sense.set_pixels(man7)
            
            
    word_string = generate_word_string(word_to_guess, correct_letters_guessed)
    print(incorrect_letters_guessed)
    print(word_string)
    print("You have {} guesses left.".format(6 - num_guessed))
    print("You have guessed {} so far".format(list(incorrect_letters_guessed)))
        
if num_guessed < 6:
    print("You win!")
    sense.show_message("You win!")
else:
    print("You lose")
    sense.show_message("You lose!")
   
