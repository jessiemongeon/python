import socket, sense_hat, random, time

sense = sense_hat.SenseHat()

state = {
    "user_pick": None,
    "picks": (
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w",
    "x", "y", "z"),
    "choice_index": 0
}
words = ("duck", "cat", "dog", "horse", "goat", "cow", "pig")
word_to_guess = random.choice(words)

X = [0, 0, 255]
O = [0, 0, 0]
W = [0, 255, 0]
E = [255, 0, 0]
A = [123, 255, 90]
B = [255, 100, 50]
C = [0, 255, 120]
D = [0, 90, 255]


def generate_word_string(word_to_guess, letters_guessed):
    output = []
    for letter in word_to_guess:
        if letter in letters_guessed:
            output.append(letter.upper())
        else:
            output.append("?")
    return " ".join(output)


hangman1 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, O, O, O,
    O, X, O, O, O, O, O, O,
    O, X, O, O, O, O, O, O,
    X, X, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

hangman2 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, E, E, E, O,
    O, X, O, O, O, O, O, O,
    X, X, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

hangman3 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, E, E, E, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, E, O, E, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

art1 = [
    A, B, C, D, E, A, B, C,
    D, E, A, B, C, D, E, A,
    B, C, D, E, A, B, C, D,
    E, A, B, C, D, E, A, B,
    C, D, E, A, B, C, D, E,
    A, B, C, D, E, A, B, C,
    D, E, A, B, C, D, E, A,
    B, C, D, E, A, B, C, D
]

art2 = [
    C, D, E, A, B, C, D, E,
    A, B, C, D, E, A, B, C,
    D, E, A, B, C, D, E, A,
    B, C, D, E, A, B, C, D,
    E, A, B, C, D, E, A, B,
    C, D, E, A, B, C, D, E,
    A, B, C, D, E, A, B, C,
    D, E, A, B, C, D, E, A
]

green = [
    O, O, O, O, O, O, O, O,
    O, O, O, O, O, O, O, W,
    O, O, O, O, O, O, W, O,
    O, O, O, O, O, W, O, O,
    W, O, O, O, W, O, O, O,
    O, W, O, W, O, O, O, O,
    O, O, W, O, O, O, O, O,
    O, O, O, O, O, O, O, O
]

red = [
    E, O, O, O, O, O, O, E,
    O, E, O, O, O, O, E, O,
    O, O, E, O, O, E, O, O,
    O, O, O, E, E, O, O, O,
    O, O, O, E, E, O, O, O,
    O, O, E, O, O, E, O, O,
    O, E, O, O, O, O, E, O,
    E, O, O, O, O, O, O, E
]


man0 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, O, O, O,
    O, X, O, O, O, O, O, O,
    X, X, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

man1 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, O, O, O,
    X, X, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

man2 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

man3 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, O, E, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

man4 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, E, E, O, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, O, E, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

man5 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, E, E, E, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, O, E, O, O,
    X, O, X, O, O, O, O, O,
    X, O, X, O, O, O, O, O,
]

man6 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, E, E, E, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, O, E, O, O,
    X, O, X, O, E, O, O, O,
    X, O, X, O, O, O, O, O,
]


man7 = [
    O, O, X, X, X, O, O, O,
    O, X, O, O, O, X, O, O,
    O, X, O, O, O, E, O, O,
    O, X, O, O, E, E, E, O,
    O, X, O, O, O, E, O, O,
    X, X, X, O, O, E, O, O,
    X, O, X, O, E, O, E, O,
    X, O, X, O, O, O, O, O,
]


# Server settings
host = ''
port = 8011
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#Bind port
s.bind((host, port))
s.listen(1)
#Connect to other pi
conn, addr = s.accept()
print('Connected by', addr)

def main(word_to_guess):
    #Send word
    conn.send(word_to_guess.encode())

    #Beginning animation
    sense.clear()
    for image in [hangman1, hangman2, hangman3]:
        sense.set_pixels(image)
        time.sleep(1)
    sense.set_pixels(art1)
    time.sleep(1)
    sense.set_rotation(180)
    sense.set_pixels(art2)
    time.sleep(1)
    sense.set_rotation(0)
    sense.show_message("Welcome to Hangman!", scroll_speed=0.1, text_colour=[255, 0, 255])
    sense.show_message("Pick a letter", scroll_speed=0.1, text_colour=[0, 180, 255])
    sense.set_pixels(hangman1)

    #Game variables
    letters_to_guess = set(word_to_guess)
    correct_letters_guessed = set()
    incorrect_letters_guessed = set()
    num_guessed = 0

    #Get data from other pi
    while (len(letters_to_guess) > 0) and num_guessed < 8:
        s.listen(1)
        user_pick = (conn.recv(1024).decode())


        if user_pick in letters_to_guess:
            letters_to_guess.remove(user_pick)
            correct_letters_guessed.add(user_pick)
            conn.send("Yes, there's one of those".encode())
            word_string = generate_word_string(word_to_guess, correct_letters_guessed)
            sense.set_pixels(green)
            time.sleep(1)
            sense.show_message(word_string, scroll_speed=0.1, text_colour=[0, 180, 255])
            time.sleep(1)
            if num_guessed == 0:
                sense.set_pixels(hangman1)
            elif num_guessed == 1:
                sense.set_pixels(man0)
            elif num_guessed == 2:
                sense.set_pixels(man1)
            elif num_guessed == 3:
                sense.set_pixels(man2)
            elif num_guessed == 4:
                sense.set_pixels(man3)
            elif num_guessed == 5:
                sense.set_pixels(man4)
            elif num_guessed == 6:
                sense.set_pixels(man5)
            elif num_guessed == 7:
                sense.set_pixels(man6)
            elif num_guessed == 8:
                sense.set_pixels(man7)
        else:
            incorrect_letters_guessed.add(user_pick)
            num_guessed += 1
            conn.send("No, none of those".encode())
            word_string = generate_word_string(word_to_guess, correct_letters_guessed)
            sense.set_pixels(red)
            time.sleep(1)
            sense.show_message(word_string, scroll_speed=0.1, text_colour=[0, 180, 255])
            time.sleep(1)
            if num_guessed == 1:
                sense.set_pixels(man0)
            elif num_guessed == 2:
                sense.set_pixels(man1)
            elif num_guessed == 3:
                sense.set_pixels(man2)
            elif num_guessed == 4:
                sense.set_pixels(man3)
            elif num_guessed == 5:
                sense.set_pixels(man4)
            elif num_guessed == 6:
                sense.set_pixels(man5)
            elif num_guessed == 7:
                sense.set_pixels(man6)
            elif num_guessed == 8:
                sense.set_pixels(man7)

        print(incorrect_letters_guessed)
        print(word_string)
        print("You have {} guesses left.".format(8 - num_guessed))
        print("You have guessed {} so far".format(list(incorrect_letters_guessed)))

    if num_guessed < 8:
        sense.show_message("You win!", scroll_speed=0.1, text_colour=[0, 0, 255])
    else:
        sense.show_message("You lose!", scroll_speed=0.1, text_colour=[255, 0, 0])
        
        
main(word_to_guess)
sense.show_message("Play again?")
if conn.recv(1024).decode() == "play":
    main(word_to_guess)


